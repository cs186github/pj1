                    Simpledb Project Specification
  Overview: Will be completed later.
PartI: design trade-offs 
  1> During the code process, we try our best to get the code more readable.
So when we get a new idea, we put it in the code only when it will not make
our code more complex or hard to understand.
Part II: Simpledb architeture

 		  SQL operations    Results 
           		   |           ^
  		           |           |
  -------------------------v-------------------------------
  |                  Database APP			  |
  ---------------------------------------------------------
  |            Query optimisation and query plan          |
  |                 generating                            |
  ---------------------------------------------------------
  |                Relational operations                  |
  ---------------------------------------------------------
  |                  Access Methods                       |
  ---------------------------------------------------------
  |               Buffer Pool management(Core part)       |
  ---------------------------------------------------------
  |             Disk Space management                     | 
  --------------------------------------^------------------
                                  |     |
                           -------v---------
                           |               |
                           |   Data Base   |  <----------------Disk, Tape, other 
                           |               |                   secondary storages.
                           -----------------
Part III: class specifications
    In this part, we describles how each part of the system works and the detailed design specifications for every class. For a few classes, there may include the test skeleton. The spacification should be clear enough for a expericed programmer to write all the code in a few hours.
 Section I: designing
 1. BufferPool
  <1>Tasks 
    Read pages from the disk.
    Writ pages to the disk.
    Keep track of the using pages and empty pages.
    Swap pages(Replacing scheduler).
    Update residential pages(Delete tuple, Insert tuple).
    Check lock. 
  <2>Implementations
    Data structure:
    public static final int PAGE_SIZE
    public static final int DEFAULT_PAGES
    private static Page[] _pool : _pool is a buffer pool data structure, which holds the residential pages. During the database runtime, you can create only one _pool, which is created when BufferPool is constructed.  
    private static int[] pinCount : pinCount keeps track of the times of the corresponding page being referenced.  
    private static byte[] dirty : If a page is updated, change the dirty byte to 1.
    Methods:
    public BufferPool(int numPages){
      Create a _pool with numPages pages.
      Create and initialze the pinCount to zero.
      Create and initialze the dirty to zero.
    } Note the length of arrays. 
    public BufferPool(){
      this(DEFAULT_PAGES);
    }
    public  Page getPage(TransactionId tid, PageId pid, Permissions perm)
        throws TransactionAbortedException, DbException {
       Assert tid, pid and perm is not null.
       ??What is a transaction
       ??What is permission     
    } Not completed(Concurrecy related).
    public boolean holdsLock(TransactionId tid, PageId p) {
    }
    public  void releasePage(TransactionId tid, PageId pid) {
       ??How to hold a page
    } 
    public void transactionComplete(TransactionId tid) throws IOException {
    }
    public void transactionComplete(TransactionId tid, boolean commit)
        throws IOException {
    }
    public void insertTuple(TransactionId tid, int tableId, Tuple t)
        throws DbException, IOException, TransactionAbortedException {
    }
    public  void deleteTuple(TransactionId tid, Tuple t)
        throws DbException, TransactionAbortedException {
    }
    public synchronized void flushAllPages() throws IOException {
    }    
    public synchronized void discardPage(PageId pid) {
    }
    private synchronized  void flushPage(PageId pid) throws IOException {
    }
    public synchronized  void flushPages(TransactionId tid) throws IOException {
    }    
    private synchronized  void evictPage() throws DbException {
    }  
 2. File organization
  <1> Database files
      DbFile: all of the database files should implement this.
         |___CatalogFile: contains system catalog.
         |___HeapFile: stores relations.
         |___LogFile: system log. Used for data recovery. Write log first.
  <2> Heapfile related details 
      *HeapPageId class*
        HeapPageId is used to reference a HeapPage. It must contain which table it belongs to and where it resides in the table.  
        
        int tid : the table it belongs to.
        int pgn : the page number of this page, which should always less than the page number of the corresponding field in the system catalog.   
       *HeapPage class*
         HeapPage is used to hold a page of a HeapFile. The format of a HeapPage is like: 
         --------------------------------
         | header part | ... | tuple 1  |
         |-------------------------------
         | tuple 2| ...|(empty part) 0 0|
         --------------------------------
The length of header part and the number of slots in this page is stored in the corresponding system catalog entry. ??How to maintain the dirty information of a page. 

         HeapPageId pid : the identifier of this page. <TableId, pageNo> 
         TupleDesc td : td should reference a copy of the corresponding table TupleDesc in the system catalog. That way there is little chance to change it unexpectedly.
         byte header[] : the byte of the header occupied. The bits of it indicates whether a slot of this page is occupied or used. e.g if header[i] is 1, then slot #1 is in using, otherwise is not in using. 
         Tuple tuples[] : 
         int numSlots : the number of slots in this page. it should always equal to tuples.length. 
         byte[] oldData : when it is filled, it maintains the data this page. It can be used to rebuild a same page as this one.  
          

         deleteTuple(Tuple t) throws DbException{
           find the tuple using its RecordId, if the tuple is not in this page or the tuple slot has already empty, throws DbException. 
           set the corresponding tuple to null.
           set the corresponding header bit to 0.  
         } 
         public static Tuple findTuple(Tuple t) throws DbException{
           (new added method)
           if t is in this page and return it, throws a DbException otherwise. 
         }
         public void markDirty(boolean dirty, TransactionId tid) {
           Set this.dirty to true and record the corresponding TransactionId.
         }
        
  <3> Catalogfile related details
       *CatalogEntry interface*
         CatalogEntry interface is used to facilitate an item in the catalog. All of items a system catalog want to store must implement this class. In the implementation, this class and all of the subclass reside in the Catalog class.  
       *CatalogHeap extends CatalogEntry*
        int tableId : every table has a unique tableId to reference a table in this database. We will use tableId as a hash key to reference a CatalogHeap in the hashtable. 
        String tableName : maintains the table name of the corresponding tableId. May be "", but not null.  
        TupleDesc tds : the current tuple descriptor.
        String pkey : the primary key of this table.
        int numPage : the number of pages of the corresponding file.
        int headerLen : the length of header part in a page. 
        int numSlots : the number of slots in a page.
        String tableLoc: the location of this table on the disk. Default to be "current directory/data". This feature has not been implemented.
        
        numSlots = floor((BufferPool.PAGE_SIZE * 8) / (tuple size * 8 + 1)) 
        headerLen = ceiling(tupsPerPage/8)

       *CatalogLog extends CatalogEntry*
       
       
       *Catalog class*
        Catalog is also a table, which maintains the system catalog of the current database system. When add a table into this catalog, we use a unique database file identifier(returned by dbfile.getId()). If a table name is 'null', we will give that table a name converted by its identifier and may print a warning message.  
        
        java.util.HashTable<Integer, CatalogItem>[] catalog : maintains all of the catalog information, Where catalog[0] is about database table, catalog[1] is about database log file information.
        java.util.LinkedList<Integer> ID : contains all of entry identifiers in this catalog. No repeated inserting is allowed. 
      
  <4> Tuple related details
      *Tuple class*
        A Tuple maintains the information about the contents of a tuple. Its location on a page of a table is marked with a RecordId, whose contents are about where this tuple is. Once a tuple is created, its length is determined and is not changed until this table is rebuild. So if you want to change a TupleDesc and it actually effect the tuple, the table must be recreated to accomplish this job. 

        private static final long serialVersionUID = 1L;
        private Fields[] fields : this array holds the fields data in a tuple. Its length is specified in its TupleDesc object.  
        private TupleDesc tud : when initialized, tud is specified to reference the corresponding TupleDesc item in the system catalog.
        private RecordId rid : it is initialized when this tuple is loaded. When it is first created, the rid is initialized to a 'null'. 
 
        public Tuple(TupleDesc td){
          if td is null:
             print warning "Tuple construtor failure: TupleDesc can not be null." 
          else:
             initialize this tuple.
        }
   <5> Operators details
        Operators are reponsible for excuting a query plan. All of the query jobs are exeuted by the low level operators. 
       *SeqScan class*
         SeqScan sequentially scans the tuple of a specified table.

         private TransactionId tid : the transaction this scan is running as a part of.
         
       


 Section II: testing
   
